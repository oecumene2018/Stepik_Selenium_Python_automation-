# Зачем нужен фреймворк?
#
# Создавая автотесты под реальный продукт, вы столкнетесь с тем, что базовые методы Selenium WebDriver покрывают
# далеко не все потребности для тестирования web-интерфейсов. WebDriver представляет собой простой и удобный
# инструмент для взаимодействия с сайтами в браузерах. На его базе уже можно строить более сложные
# инструменты-фреймворки.  В предыдущих уроках этого модуля мы познакомились с паттерном проектирования
# UI-тестов Page Object Model. Основная задача подхода Page Object -- уменьшить дублирование кода.
#
# Какие еще трудности возникают при написании автотестов на Selenium?
#
# Например, мы уже пробовали реализовать метод is_element_present, с помощью которого можно проверить
# наличие элемента без получения исключения NoSuchElementException. Хотелось бы иметь возможность также
# легко проверить видимость элемента на странице или более того, всегда по умолчанию находить только видимые элементы.
# Для развертывания прогона автотестов в системах непрерывной интеграции таких как Jenkins, TeamCity, Travis CI
# удобно иметь настройку генерации скриншотов в момент падения теста.
#
# Можно реализовывать данные методы самостоятельно, так как это даст вам бесценный опыт программирования и глубокое
# понимание внутреннего устройства Selenium, PyTest и других инструментов. Однако, в небольших компаниях на разработку
# и поддержку дополнительного инструментария обычно нет лишних ресурсов. К счастью, вы можете воспользоваться
# бесплатными библиотеками и фреймворками, которые помогут решить вам эти задачи и не изобретать собственный велосипед.
#
# Мы не можем рекомендовать какой-то конкретный фреймворк, так как каждый из них имеет свои сильные и слабые стороны,
# и конечный выбор должен оставаться за вами с учетом потребностей тестируемого продукта. Мы описали в этом уроке
# несколько основных фреймворков для Python и Selenium. Советуем сделать небольшой тестовый проект на каждом из них,
# используя официальную документацию, и после этого решать, какой инструмент внедрить. Так как все рассматриваемые
# фреймворки и библиотеки являются проектами с открытым исходным кодом, вы также можете самостоятельно реализовывать
# нужные методы, взяв за образец уже готовый код из данных проектов.
#
# Краткое описание фреймворков
#
# Splinter — довольно мощная надстройка над Selenium WebDriver, имеет множество дополнительных методов.
# Для работы совместно с PyTest существует специальный плагин pytest-splinter, включающий собственные фикстуры.
# Selene — реализация для Python идей популярного Java-фреймворка Selenide.
# PyPOM — библиотека для реализации Page Object Model от разработчиков из проекта Mozilla. Поддерживает работу
# со Splinter https://github.com/mozilla/PyPOM
# Webium — легковесная реализация Page Object Model от разработчиков и тестировщиков Wargaming.net
# Если вы знаете другие библиотеки и фреймворки, которые заслуживают упоминания в данном контексте, пожалуйста,
# напишите о них в комментариях.

# Стоит обратить внимание на SeleniumBase и Golem, ну и конечно же на Robot Framework + Selenium Library


# Splinter
#
# Документация: https://splinter.readthedocs.io/en/latest/index.html
#
# Код: https://github.com/cobrateam/splinter
#
# Код и документация pytest-splinter: https://github.com/pytest-dev/pytest-splinter

