# Почему именно Page Object?
#
# Можно, конечно, хранить всю логику наших тестов в одном файле под каким-нибудь условным названием steps.py,
# и для начала это уже неплохо. Но если мы тестируем большой веб-продукт с множеством разных состояний и переходов,
# этот файл может разрастись до огромных размеров, и найти в нем нужный метод будет непросто. Еще бывают ситуации,
# когда на разных страницах логически один и тот же метод имеет разную реализацию. Например, у нашего интернет-магазина
# может быть метод "добавить в корзину". Но пользователь может добавлять товар в корзину как со страницы каталога,
# так и со страницы самого товара.
#
# Было бы удобно выделить все методы, которые логически относятся к одной веб-странице в нашем продукте,
# в отдельный класс в нашем коде. Отсюда и название Page Object — это абстрактный объект, который содержит в себе
# методы для работы с конкретной веб-страницей.
#
# Важно! Обычно методы у Page Object бывают двух типов: сделать что-то и проверить что-то.
#
# Рассмотрим страницу товара в интернет магазине
# http://selenium1py.pythonanywhere.com/catalogue/the-shellcoders-handbook_209/.
#
# Какие могут быть методы у Page Object, ассоциированного с такой страницей? Запишем основные сценарии:
#
# 1. добавить в корзину;
# 2. проверить, что есть сообщение об успешном добавлении в корзину;
# 3. перейти к написанию отзыва;
# 4. проверить, что есть название, цена, описание товара;
# 5. вернуться на главную.

# Обратите внимание, что все проверки у нас тоже становятся отдельными методами. В самом тест-кейсе не остается
# никаких вспомогательных слов типа assert, только описание шагов. Прямо как в нашей тестовой документации.
#
# Тесты будут выглядеть примерно так:
#
# def test_add_to_cart(browser):
#     page = ProductPage(url="", browser)   # инициализируем объект Page Object
#     page.open()                           # открываем страницу в браузере
#     page.should_be_add_to_cart_button()   # проверяем что есть кнопка добавления в корзину
#     page.add_product_to_cart()            # жмем кнопку добавить в корзину
#     page.should_be_success_message()      # проверяем что есть сообщение с нужным текстом
