# Задание: группировка тестов и setup
#
# ВАЖНО! Вообще говоря манипулировать браузером в сетапе и уж тем более что-то там проверять — это плохая практика,
# лучше так не делать без особой необходимости. Здесь этот пример исключительно в учебных целях, чтобы вы попробовали
# писать сетапы для тестов. В реальной жизни мы реализовали бы все эти манипуляции с помощью API
# или напрямую через базу данных.
#
# В этом задании мы хотим добавить тестовые сценарии не только для гостей сайта, но и
# для зарегистрированных пользователей. Для этого:
#
# 1. В файле test_product_page.py добавьте новый класс для тестов TestUserAddToBasketFromProductPage.
# 2. Добавьте туда уже написанные тесты test_guest_cant_see_success_message и test_guest_can_add_product_to_basket
# и переименуйте, заменив guest на user. Шаги тестов не изменятся, добавится лишь регистрация перед тестами.
# Параметризация здесь уже не нужна, не добавляйте её.
# 3. Добавьте в LoginPage метод register_new_user(email, password), который принимает две строки и регистрирует
# пользователя.  Реализуйте его, описав соответствующие элементы страницы.
# 4. Добавьте в BasePage проверку того, что пользователь залогинен:


def should_be_authorized_user(self):
    assert self.is_element_present(*BasePageLocators.USER_ICON), "User icon is not presented," \
                                                                 " probably unauthorised user"

# 5. Селектор соответственно в BasePageLocators:

USER_ICON = (By.CSS_SELECTOR, ".icon-user")

# 6. Добавьте в класс фикстуру setup. В этой функции нужно:
#   - открыть страницу регистрации;
#   - зарегистрировать нового пользователя;
#   - проверить, что пользователь залогинен.
# 7. Запустите оба теста и убедитесь, что они проходят и действительно регистрируют новых пользователей
# 8. Зафиксируйте изменения в репозитории коммитом с осмысленным сообщением

# Примечание:

# yield писать не нужно — пользователей удалять мы не умеем. Генерировать email адреса для пользователей можно
# по-разному, один из вариантов, чтобы избежать повторения, использовать текущее время с помощью модуля time:

import time # в начале файла

email = str(time.time()) + "@fakemail.org"