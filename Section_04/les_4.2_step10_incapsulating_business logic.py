# Удобство поддержки тестов — инкапсуляция бизнес-логики в методах
#
# Что делать, если изменилась логика взаимодействия со страницей, которая используется у нас в нескольких тестах?
# Например, нам нужно проверить возможность перехода на страницу логина по ссылке в навбаре для каждой из страниц сайта.
# Предположим, что таких страниц 20, и, значит, у нас есть 20 тестов, использующих метод go_to_login_page
# класса MainPage. Затем разработчики добавили alert, который вызывается при клике на нужную нам ссылку.
# Мы увидим, что все 20 тестов упали, так как в методе go_to_login_page нет шага с обработкой alert, следовательно,
# метод should_be_login_page не сработает. Добавив обработку alert в метод go_to_login_page, мы восстановим
# работоспособность всех тестов, не меняя самих тестов:
#
def go_to_login_page(self):
   link = self.browser.find_element_by_css_selector("#login_link")
   link.click()
   alert = self.browser.switch_to.alert
   alert.accept()

# Это еще одно преимущество использования паттерна Page Object — мы разделяем сам тест и логику взаимодействия
# со страницей. Тест становится более читабельным, и его легче поддерживать при изменениях в коде приложения.
