# ПЛЮСЫ НАСЛЕДОВАНИЯ: МАГИЯ ООП
#
# Если вы использовали ранее парадигму ООП при написании кода, то уже представляете, как хорошая архитектура может
# облегчить жизнь. В этом плане код автотестов ничем не отличается от кода приложений — мы можем использовать всё те
# же приёмы для организации методов.
#
# Здесь мы рассмотрим лишь один из примеров: использование механизма наследования.
#
# Мы уже немного использовали механизм наследования, когда сделали базовый класс для всех наших проверок BasePage,
# а от него наследовали все остальные Page Object: LoginPage, MainPage. Сейчас у нас в классе BasePage в основном
# технические детали — реализация поиска элементов, метод для открытия страницы и прохождения капчи. Но никто
# не мешает нам добавить туда элементы и методы, которые являются общими для всех страниц.
#
#                        BASEPAGE
#                       /   |   \
#                     /     |     \
#             MainPage ProductPage LoginPage
#
# ВАЖНО! Не нужно запихивать в базовый класс все, что плохо лежит и может когда-нибудь пригодиться. Добавлять нужно
# только то, что ОБЯЗАТЕЛЬНО будет на каждой странице-наследнике, иначе есть риск, что увеличение строк кода в файле
# будет неконтролируемым, и поддерживать его будет сложно.
#
# Вообще говоря, мы можем строить какую угодно иерархию наших классов для взаимодействия с веб-приложением, если это
# поможет избежать дублирования кода. Например, есть набор страниц с общими методами, мы можем организовать их в виде
# наследования с дополнительным "слоем".
#
# Например, когда мы тестируем страницу урока в Stepik (это та страница, на которой вы сейчас находитесь),
# мы используем LessonPage как базовый класс, где содержатся общие элементы и методы для всех типов шагов
# (шапка, комментарии, боковое расписание) и класс-наследник для каждого типа заданий, а их на Stepik более 20,
# каждый со своими уникальными методами и элементами. Такой подход позволяет избежать дублирования кода,
# и необходимости поддерживать файл на >1000 строк кода.


