# Что такое Page Object Model?
#
# Page Object Model или кратко Page Object — это паттерн программирования, который очень популярен в автоматизации
# тестирования и является одним из стандартов при автоматизации тестирования веб-продуктов. Это также один из удобных
# способов структурировать свой код таким образом, чтобы его было удобно поддерживать, менять и работать с ним.
#
# Основная идея состоит в том, что каждую страницу веб-приложения можно описать в виде объекта класса.
# Способы взаимодействия пользователя со страницей можно описать с помощью методов класса.
# В идеале тест, который будет использовать Page Object, должен описывать бизнес-логику тестового сценария и скрывать
# Selenium-методы взаимодействия с браузером и страницей. При изменениях в верстке страницы не придется исправлять
# тесты, связанные с этой страницей. Вместо этого нужно будет поправить только класс, описывающий страницу.
#
# То есть здесь применяются те же принципы, что и в разработке: мы хотим повысить читаемость кода и вынести в
# абстрактные методы все детали. Тесты должны быть просто и понятно написаны, а повторяющиеся куски кода выделены
# в отдельные функции. В Page Object мы отделяем логику действий, например, авторизовать пользователя,
# от конкретной реализации (найти поле почты, ввести туда данные, найти поле пароля, ввести туда данные,
# найти кнопку и т.д.).

# Рассмотрим такой простой тест-кейс:
#
# 1. Открыть главную страницу
# 2. Перейти на страницу логина
# Ожидаемый результат:
#
# Открыта страница логина
#
#
# Давайте посмотрим на кусочек кода теста из предыдущего модуля, который реализует первую часть этого теста:
#
# test_main_page.py:

link = "http://selenium1py.pythonanywhere.com/"


def test_guest_can_go_to_login_page(browser):
    browser.get(link)
    login_link = browser.find_element_by_css_selector("#login_link")
    login_link.click()

# Что здесь происходит?
#
# Мы открываем ссылку, находим элемент с определенным селектором и нажимаем на этот элемент.
#
# Что мы на самом деле имеем в виду?
#
# Мы хотим открыть страницу логина. Давайте выделим это действие в отдельную функцию с понятным названием,
# пока все в том же файле test_main_page.py :
#
def go_to_login_page(browser):
    login_link = browser.find_element_by_css_selector("#login_link")
    login_link.click()
# и наш тест упрощается:
#
def test_guest_can_go_to_login_page(browser):
   browser.get(link)
   go_to_login_page(browser)
# При написании следующих тестов, когда нам понадобится перейти к странице логина с главной страницы,
# нам не нужно будет копировать этот кусочек кода или писать заново — мы сможем переиспользовать уже написанный метод.
#
# Круто? А мы еще даже не написали Page Object. Дальше будет круче.
#
# Дополнительно про Page Object вы можете почитать здесь:

https://github.com/SeleniumHQ/selenium/wiki/PageObjects

https://martinfowler.com/bliki/PageObject.html

https://medium.com/tech-tajawal/page-object-model-pom-design-pattern-f9588630800b