# ФИКСИРУЕМ ПАКЕТЫ В REQUIREMENTS.TXT
#
# Количество пакетов в нашем проекте растет, а мы тем временем все дальше уходим от учебных кусочков скриптов
# в сторону настоящего тестового проекта, поэтому в этом шаге давайте зафиксируем все пакеты, которые мы используем.
# Это стандартная практика, которая позволяет быстро переключаться в свежее виртуальное окружение,
# а также работать нескольким людям над одним проектом, получая одинаковые результаты.
#
# Откройте терминал, перейдите в директорию, в которой вы работаете с автотестами, и активируйте виртуальное окружение.
#
# После чего выполните в терминале команду:
#
# pip freeze > requirements.txt  (pip3 freeze > requirements.txt )
# Эта команда сохранит все версии пакетов в специальный файл requirements.txt.
#
# Как их оттуда достать? Попробуйте создать новое виртуальное окружение (если нужно, вернитесь в модуль
# 1 за инструкциями) и активировать. После чего выполните команду:
#
# pip install -r requirements.txt
# В свежем окружении все пакеты установлены одной командой!



# PYTEST: ПРАВИЛА ЗАПУСКА ТЕСТОВ
#
# В этом шаге мы коротко обсудим важные особенности запуска тестов с помощью PyTest.
# Когда мы выполняем команду pytest, тест-раннер собирает все тесты для запуска по определенным правилам:
#
# если мы не передали никакого аргумента в команду, а написали просто pytest,
# тест-раннер начнёт поиск в текущей директории
#
# как аргумент можно передать файл, путь к директории или любую комбинацию директорий и файлов, например:
#
# pytest scripts/selenium_scripts
# # найти все тесты в директории scripts/selenium_scripts
#
# pytest test_user_interface.py
# # найти и выполнить все тесты в файле
#
# pytest scripts/drafts.py::test_register_new_user_parametrized
# # найти тест с именем test_register_new_user_parametrized в указанном файле в указанной директории и выполнить
# дальше происходит рекурсивный поиск: то есть PyTest обойдет все вложенные директории
#
# во всех директориях PyTest ищет файлы, которые удовлетворяют правилу  test_*.py или *_test.py
# (то есть начинаются на test_ или заканчиваются _test и имеют расширение .py)
#
# внутри всех этих файлов находит тестовые функции по следующему правилу:
#
# все тесты, название которых начинается с test, которые находятся вне классов
#
# все тесты, название которых начинается с test внутри классов, имя которых начинается с Test
# (и без метода __init__ внутри класса)
#
# Подробности: Conventions for Python test discovery :
# https://docs.pytest.org/en/latest/goodpractices.html#conventions-for-python-test-discovery
